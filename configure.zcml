<!-- -*- mode: nxml -*- -->
<configure	xmlns="http://namespaces.zope.org/zope"
			xmlns:i18n="http://namespaces.zope.org/i18n"
			xmlns:ext="http://nextthought.com/ntp/ext"
			xmlns:zcml="http://namespaces.zope.org/zcml"
			i18n_domain="nti.dataserver">

	<include package="zope.i18n" file="meta.zcml" />
	<include package="zope.security" file="meta.zcml" />
	<include package="zope.component" file="meta.zcml" />
	<include package="zope.preference" file="meta.zcml" />
	<include package="zope.principalregistry" file="meta.zcml" />

	<include package="zope.site" />
	<include package="zope.catalog" />
	<include package="zope.location" />
	<include package="zope.security" />
	<include package="zope.component" />
	<include package="zope.container" />
	<include package="zope.traversing" />
	<include package="zope.dublincore" />
	<include package="zope.annotation" />
	
	<!--
	Note that this gives us a default IAuthentication object in
	the global registry. (We need a persistent implementation)
	-->
	<include package="zope.principalregistry" />
	<include package="zope.vocabularyregistry" />

	<include package="zope.i18n" />

	<include package="zope.generations" />
	<include package="zope.generations" file="subscriber.zcml" />

	<!-- Broken objects that support annotations and locations -->
	<exclude package="zope.app.broken" file="browser.zcml" />
	<include package="zope.app.broken" />

	<include package="zope.preference" />

	<!-- Hashed password management. Includes zope.password -->
	<include package="z3c.bcrypt"
			 zcml:condition="installed cryptacular.bcrypt"/>
	<include package="z3c.password" />

	<!-- Trivial password policy utility for devmode -->
	<utility factory="z3c.password.password.TrivialPasswordUtility"
		 zcml:condition="have devmode" />

	<!-- Simple dependency management -->
	<include package="zope.app.dependable" />


	<include package="nti.site" />

	<!-- Entries in the Zope root principal registry -->
	<!--
		 Note that we choose names that match pyramid
		 where applicable, and in that style otherwise
	-->
	<unauthenticatedPrincipal
		id="system.Unknown"
		title="Anonymous user"
		description="A person we don't know" />
	<unauthenticatedGroup
		id="system.UnknownGroup"
		title="Anonymous users"
		description="People we don't know" />
	<authenticatedGroup
		id="system.Authenticated"
		title="Authenticated users"
		description="People we know" />
	<everybodyGroup
		id="system.Everyone"
		title="Everybody"
		description="All people" />

	<include package="nti.wref" />

	<!-- Int ids and persistent references by identity -->
	<include package="nti.intid" />
	<include package="nti.intid" file="subscribers.zcml" />

	<!-- contentratings -->
	<!-- It requires i18n support, but we disable its browser support -->
	<include package="zope.i18n" file="meta.zcml" />
	<exclude package="contentratings.browser" />
	<configure xmlns:contentratings="http://namespaces.plone.org/contentratings"
			   zcml:condition="installed Acquisition" >
		<include package="contentratings" file="meta.zcml" />
		<include package="contentratings" />

		<contentratings:category
			for=".interfaces.ILikeable"
			title="Likes"
			name="likes"
			storage=".liking._BinaryUserRatings" />
		<contentratings:category
			for=".interfaces.IFavoritable"
			title="Favorites"
			name="favorites"
			storage=".liking._BinaryUserRatings" />
		<contentratings:category
			for=".interfaces.IRatable"
			title="Rating"
			name="rating"
			storage="contentratings.storage.UserRatingStorage" />
	</configure>

	<subscriber handler=".liking.update_last_mod_on_rated" />
	<subscriber handler=".rating.update_last_mod_on_rated" />

	<!-- Flagging -->
	<adapter factory=".flagging.FlaggableGlobalFlagStorageFactory" />
	<subscriber handler=".flagging._delete_flagged_object" />
	<!--
		 We reuse the rated modification time updater for flagging too; if we don't update mod times
		 on flagging events, caching is really hard.
	-->
	<subscriber handler=".rating.update_last_mod"
				for=".interfaces.ILastModified .interfaces.IObjectFlaggingEvent" />

	<include package="nti.externalization" file="meta.zcml" />
	<include package="nti.externalization" />

	<include package="nti.zodb" />
	<include package="nti.links" />
	<include package="nti.mimetype" />
	<include package="nti.chatserver" />
	<include package="nti.invitations" />
	<include package="nti.contentrange" />
	<include package="nti.contentlibrary" />
	<include package="nti.contentfragments" />

	<include package=".contenttypes" />
	
	<include package=".users" />
	<include package="." file="configure_stream.zcml" />
	<include package=".utils" file="configure_bootstrap.zcml" />

	<!-- Database creation and migration -->
	<utility factory=".generations.install._DataserverSchemaManager"
			 name="nti.dataserver"
			 provides="zope.generations.interfaces.IInstallableSchemaManager"/>

	<adapter factory="._Dataserver.ExternalRefResolverFactory" />

	<!-- Database shards -->
	<adapter factory=".shards.ShardLayout" />
	<utility factory=".shards.HashedShardPlacer"
			 name="default" />

	<!-- Events -->
	<subscriber handler=".sessions._send_notification" />
	<subscriber handler=".sessions._increment_count_for_new_socket" />
	<subscriber handler=".sessions._decrement_count_for_dead_socket" />

	<subscriber handler="._Dataserver._process_did_fork_listener" />
	<subscriber handler="._Dataserver._after_database_opened_listener" />
	<subscriber handler=".session_storage._remove_sessions_for_removed_user" />
	<subscriber handler=".sharing.SharingSourceMixin_dynamicsharingtargetdeleted" />

	<!-- Container events -->
	<subscriber handler=".containers.update_container_modified_time" />

	<!-- TODO: We are relying on registration order. Make sure that's kosher. -->
	<subscriber handler=".containers.update_object_modified_time" />
	<subscriber handler=".containers.update_parent_modified_time" />

	<subscriber handler=".containers.contain_nested_objects" />

	<!-- Container adapters -->
	<adapter factory=".containers.IdGeneratorNameChooser" />

	<!-- Chat -->
	<adapter factory=".meeting_container_storage._FriendsListAdapter" />
	<adapter factory=".chat_transcripts._UserTranscriptStorageAdapter" />
	<adapter factory=".chat_transcripts.TranscriptSummaryAdapter"
			 provides=".interfaces.ITranscriptSummary" />

	<adapter factory=".chat_transcripts._MeetingTranscriptStorageExternalObjectAdapter"
			 provides="nti.externalization.interfaces.IInternalObjectIO" />
	<adapter factory=".chat_transcripts.TranscriptSummaryInternalObjectIO"
			 provides="nti.externalization.interfaces.IInternalObjectIO" />

	<adapter factory=".chat_transcripts.Transcript"
			 for=".chat_transcripts._IMeetingTranscriptStorage"
			 provides=".interfaces.ITranscript" />
	<subscriber handler=".chat_transcripts._save_message_to_transcripts_subscriber" />

	<adapter factory=".meeting_storage.EntityMeetingContainerAnnotation" />
	<adapter factory=".meeting_storage.EntityMessageInfoContainerAnnotation" />
	<adapter factory=".meeting_storage.CreatorBasedAnnotationMessageInfoStorage" />

	<!-- Externalization -->
	<subscriber factory=".datastructures.LinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />
				
	<subscriber factory=".authorization_acl.ACLDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />
				
	<subscriber factory=".liking.LikeDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator"/>
				
	<subscriber factory=".rating.RatingDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator"/>
				
	<adapter factory=".datastructures.LinkNonExternalizableReplacer" />

	<!-- Groups and principals -->
	<!--
	First, the primary group membership for users.
	All other memberships (persistent or rule-based) will
	need to have names. (We could use subscribers, but then we
	wouldn't have a default adapter.)
	-->
	<adapter factory=".authorization._persistent_group_member_factory"
			 provides=".interfaces.IMutableGroupMember"
			 for=".interfaces.IUser" />

	<!--
	Also, a place to store content access roles.
	NOTE: This should be going away in favor of
	zope.pluggableauth.plugins.groupfolders
	-->
	<adapter factory=".authorization._content_role_member_factory"
			 provides=".interfaces.IMutableGroupMember"
			 for=".interfaces.IUser"
			 name="content-role:" />

	<!-- Users can be principals and group aware principals -->
	<adapter factory=".authorization._UserGroupAwarePrincipal"
			 provides=".interfaces.IPrincipal"
			 for=".interfaces.IUser" />
	<adapter factory=".authorization._UserGroupAwarePrincipal"
			 provides=".interfaces.IGroupAwarePrincipal"
			 for=".interfaces.IUser" />
	<!-- We can also have a participation for the user -->
	<adapter factory=".authorization._participation_for_user" />

	<!--
		 And we can get back from that to something that is
		 annotatable -->
	<adapter
		factory=".authorization._UserGroupAwarePrincipalAnnotations"
		provides="zope.annotation.interfaces.IAnnotations"
		for=".authorization._UserGroupAwarePrincipal" />

	<!--
	...and when we need annotations in any more explicit
	context. Primarily this is for zope.preference,
	but zope.principalannotation registers its adapter
	for (IPrincipal, *).
	NOTE: We are /not/ enabling/configuring zope.principalannotation
	because it wants to live as its own persistent component in the
	site manager in the database.
	-->
	<adapter
		factory=".authorization._UserGroupAwarePrincipalAnnotations"
		provides="zope.annotation.interfaces.IAnnotations"
		for=".authorization._UserGroupAwarePrincipal *" />
	<!-- It externalizes as the underlying user -->
	<adapter
		factory=".authorization._UserGroupAwarePrincipalExternalObject"
		provides="nti.externalization.interfaces.IExternalObject"
		for=".authorization._UserGroupAwarePrincipal" />

	<!-- Communities can be groups -->
	<adapter factory=".authorization._CommunityGroup"
			 provides=".interfaces.IGroup"
			 for=".users.Community" />

	<!-- DFL can be principals and groups -->
	<adapter factory=".authorization._DFLPrincipal"
			 provides=".interfaces.IPrincipal"
			 for=".interfaces.IDynamicSharingTargetFriendsList" />
	<adapter factory=".authorization._DFLGroup"
			 provides=".interfaces.IGroup"
			 for=".users.DynamicFriendsList" />

	<!-- Allow treating arbitrary strings as IPrincipal/IGroup -->
	<adapter factory=".authorization._string_principal_factory"
			 provides=".interfaces.IPrincipal"
			 for="basestring"/>
	<adapter factory=".authorization._string_group_factory"
			 provides=".interfaces.IGroup"
			 for="basestring"/>
	<adapter factory=".authorization._string_role_factory"
			 provides=".interfaces.IRole"
			 for="basestring"/>
	<!-- System users are adapted specially -->
	<adapter factory=".authorization._system_user_factory"
			 provides=".interfaces.IPrincipal"
			 name="zope.security.management.system_user"
			 for="basestring" />
	<adapter factory=".authorization._system_user_factory"
			 provides=".interfaces.IPrincipal"
			 name="system"
			 for="basestring" />
	<adapter factory=".authorization._EveryoneGroup"
			 provides=".interfaces.IGroup"
			 name="system.Everyone" />
	<adapter factory=".authorization._AuthenticatedGroup"
			 provides=".interfaces.IGroup"
			 name="system.Authenticated" />

	<adapter factory=".interfaces.DefaultCreatedUsername" />

	<!-- Notable filters -->
	<subscriber factory=".notables.ReplyToNotableFilter"
				provides=".interfaces.INotableFilter"
				for="*" />

	<subscriber factory=".notables.CircledNotableFilter"
				provides=".interfaces.INotableFilter"
				for="*" />

	<!-- ACL/ACE permissions -->
	<include package="." file="configure_acls.zcml" />

	<!-- NTIID Resolvers -->
	<include package="." file="configure_ntiids.zcml" />

	<!-- Weak refs -->
	<include package="." file="configure_weakrefs.zcml" />

	<!-- Additional/plugin packages -->
	<!-- The ones directly mentioned are part of this distribution until they get moved out -->

	<include package="z3c.autoinclude" file="meta.zcml" />
	<includePlugins package="." />

</configure>
