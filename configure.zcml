<!-- -*- mode: nxml -*- -->
<configure
	xmlns="http://namespaces.zope.org/zope"
	xmlns:ext="http://nextthought.com/ntp/ext"
	i18n_domain="zope">
	<include package="zope.component" />
	<include package="zope.location" />
	<include package="zope.traversing" />
	<include package="zope.container" />
	<include package="zope.dublincore" />
	<include package="zope.annotation" />
	<include package="zope.security" />
	<include package="zope.generations" />
	<include package="zope.generations" file="subscriber.zcml" />
	<!-- Hashed password management. Includes zope.password -->
	<include package="z3c.bcrypt" />

	<!-- Int ids and persistent references by identity -->
	<!--
	If we load zope.intid, we get subscribers for the Object
	events that ensure all ILocation objects are
	registered/unregistered when they are added/removed, plus
	another set of events when they get/lose intids. This
	second set of events is meant to update zope.catalog
	(which we don't have).
	A consequence of this is that ILocation objects must be adaptable
	to KeyReferences when the are Added (for purposes of zope.catalog, which we don't
	care about, but this also
	ensures that they have ZODB Connections, which is good).

	We cannot use these subscribers as-is; see the notes in
	intid_subscribers.py for details. Instead we have our own implementation.
	-->
	<exclude package="zope.intid" file="subscribers.zcml" />
	<include package="zope.intid" />
	<include file="intid_subscribers.zcml" />
	<include package="zope.keyreference" />
	<!--
	zc.intid fires a different set of events when objects gain/lose
	intids.
	-->
	<include package="zc.intid" />
	<!-- This file has a bug, so we replicate its effect -->
	<!--
	<include package="zc.intid" file="zope-intid.zcml" />
	-->
	<class class="zc.intid.utility.IntIds">
		<implements interface="zope.intid.interfaces.IIntIds"/>
	</class>

	<!-- contentratings -->
	<!-- It requires i18n support, but we disable its browser support -->
	<include package="zope.i18n" file="meta.zcml" />
	<exclude package="contentratings.browser" />
	<include package="contentratings" />
	<include package="contentratings" file="meta.zcml" />
	<configure
		xmlns:contentratings="http://namespaces.plone.org/contentratings">
		<contentratings:category
			for=".interfaces.ILikeable"
			title="Likes"
			name="likes"
			storage=".liking._BinaryUserRatings" />
		<contentratings:category
			for=".interfaces.IFavoritable"
			title="Favorites"
			name="favorites"
			storage=".liking._BinaryUserRatings" />
	</configure>
	<subscriber handler=".liking.update_last_mod_on_rated" />

	<!-- Flagging -->
	<adapter factory=".flagging.FlaggableGlobalFlagStorageFactory" />
	<subscriber handler=".flagging._delete_flagged_object" />

	<include package="nti.externalization" file="meta.zcml" />
	<include package="nti.externalization" />
	<ext:registerMimeFactories module=".contenttypes" />
	<ext:registerMimeFactories module=".users" />
	<ext:registerMimeFactories module=".classes" />
	<ext:registerMimeFactories module=".quizzes" />

	<include package="nti.chatserver" />
	<include package="nti.contentlibrary" />
	<include package="nti.zodb" />
	<include package="nti.contentrange" />
	<include package="nti.contentfragments" />

	<!-- Database creation and migration -->
	<utility factory=".generations.install._DataserverSchemaManager"
			 name="nti.dataserver"
			 provides="zope.generations.interfaces.IInstallableSchemaManager"/>

	<utility component="._Dataserver._trivial_db_transaction_cm" />
	<utility component="._Dataserver.run_job_in_site" />
	<adapter factory="._Dataserver.ExternalRefResolverFactory" />

	<!-- Events -->
	<subscriber handler=".users.user_devicefeedback" />
	<subscriber handler=".users.user_willRemoveIntIdForContainedObject" />
	<subscriber handler=".session_storage._remove_sessions_for_removed_user" />

	<!-- Container events -->
	<subscriber handler=".containers.update_container_modified_time" />
	<subscriber handler=".containers.update_parent_modified_time" />
	<subscriber handler=".containers.update_object_modified_time" />

	<!-- Chat -->
	<adapter factory=".meeting_container_storage._FriendsListAdapter" />
	<adapter factory=".meeting_container_storage._ClassSectionAdapter" />
	<adapter factory=".chat_transcripts._UserTranscriptStorageAdapter"
			 />
	<adapter factory=".chat_transcripts.TranscriptSummaryAdapter"
			 provides=".interfaces.ITranscriptSummary" />

	<adapter factory=".chat_transcripts.TranscriptSummaryAdapter"
			 provides="nti.externalization.interfaces.IInternalObjectIO" />
	<adapter factory=".chat_transcripts.TranscriptSummaryAdapter"
			 provides="nti.externalization.interfaces.IInternalObjectIO"
			 name="wsgi"/> <!-- TODO: Not used anymore? -->

	<adapter factory=".chat_transcripts.Transcript"
			 for=".chat_transcripts._IMeetingTranscriptStorage"
			 provides=".interfaces.ITranscript" />
	<subscriber
		handler=".chat_transcripts._save_message_to_transcripts_subscriber"
		/>

	<adapter factory=".meeting_storage.EntityMeetingContainerAnnotation" />
	<adapter factory=".meeting_storage.EntityMessageInfoContainerAnnotation" />
	<adapter factory=".meeting_storage.CreatorBasedAnnotationMessageInfoStorage" />

	<adapter factory=".mimetype.ModeledContentTypeAwareAdapter" />

	<!-- Externalization -->
<!--	<adapter factory=".links.NoOpLinkExternalObjectAdapter"
			 name="wsgi" />
-->
	<adapter factory=".users_external._EntitySummaryExternalObject"
			 name="summary" />
	<adapter factory=".users_external._UserSummaryExternalObject"
			 name="summary" />
	<adapter factory=".users_external._UserPersonalSummaryExternalObject"
			 name="personal-summary" />

	<adapter factory=".users_external._EntityExternalObject" />
	<adapter factory=".users_external._FriendsListExternalObject" />
	<adapter factory=".users_external._UserExternalObject" />

	<adapter factory=".activitystream_change._ChangeExternalObject" />


	<subscriber factory=".datastructures.LinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />
	<subscriber factory=".authorization_acl.ACLDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />
	<subscriber factory=".datastructures.MimeTypeDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />
	<subscriber factory=".liking.LikeDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator"/>
	<adapter factory=".datastructures.LinkNonExternalizableReplacer" />
<!--
	It breaks fewer test cases to let these pass right on through with
	the LinkNonExternalizableReplacer...they like to get the .target
	and .rel attributes. So we count on fixing things up with the
	LinkExternalObjectDecorator registered next
	<adapter factory=".links_external.LinkExternal" />
-->
	<subscriber factory=".links_external.LinkExternalObjectDecorator"
				provides="nti.externalization.interfaces.IExternalObjectDecorator" />


	<!-- Finding objects by mimetype -->
	<adapter factory=".mimetype.ModeledContentTypeMimeFactory"
			 provides="nti.externalization.interfaces.IMimeObjectFactory"
			 for="dolmen.builtins.IDict" />


	<!-- Groups and ACLs -->
	<!-- First, make something that can store group names on the user -->
	<class class=".users.User">
		<implements interface="zope.annotation.interfaces.IAttributeAnnotatable" />
	</class>
	<class class=".users.FriendsList">
		<implements interface="zope.annotation.interfaces.IAttributeAnnotatable" />
	</class>
	<class class=".classes.SectionInfo">
		<implements interface="zope.annotation.interfaces.IAttributeAnnotatable" />
	</class>
	<!-- As we add more of these (rule based) we'll need to give them names -->
	<!-- TODO: Couldn't we use subscribers for this instead of names? -->
	<adapter factory=".authorization._persistent_group_member_factory"
			 provides=".interfaces.IGroupMember"
			 for=".users.User" />

	<!-- Users can be principals -->
	<adapter factory=".authorization._UserPrincipal"
			 provides=".interfaces.IPrincipal"
			 for=".interfaces.IUser" />
	<!-- Communities can be groups -->
	<adapter factory=".authorization._CommunityGroup"
			 provides=".interfaces.IGroup"
			 for=".users.Community" />
	<!-- Allow treating arbitrary strings as IPrincipal -->
	<adapter factory=".authorization._string_principal_factory"
			 provides=".interfaces.IPrincipal"
			 for="basestring"/>
	<!-- System users are adapted specially -->
	<adapter factory=".authorization._system_user_factory"
			 provides=".interfaces.IPrincipal"
			 name="zope.security.management.system_user"
			 for="basestring" />
	<adapter factory=".authorization._EveryoneGroup"
			 provides=".interfaces.IGroup"
			 name="system.Everyone" />
	<adapter factory=".authorization._AuthenticatedGroup"
			 provides=".interfaces.IGroup"
			 name="system.Authenticated" />

	<!-- FriendsLists can iterate usernames -->
	<adapter factory=".users._FriendsListUsernameIterable" />
	<!-- Class sections can iterate usernames -->
	<!-- All by themselves!
	<adapter factory=".classes._SectionUsernameIterable" />
	-->

	<!-- ACL/ACE permissions -->
	<include file="meta.zcml" package="zope.security" />

	<permission
			id="nti.actions.create"
			title="" />
	<permission
			id="nti.actions.delete"
			title="" />
	<permission
			id="nti.actions.update"
			title="" />

	<!-- ACL providers -->
	<adapter factory=".authorization_acl._EntityACLProvider" />
	<adapter factory=".authorization_acl._CreatedACLProvider" />
	<adapter factory=".authorization_acl._ShareableModeledContentACLProvider" />
	<adapter factory=".authorization_acl._SectionInfoACLProvider" />
	<adapter factory=".authorization_acl._ClassInfoACLProvider" />
	<adapter factory=".authorization_acl._EnclosedContentACLProvider" />
	<adapter factory=".authorization_acl._FriendsListACLProvider" />
	<adapter factory=".authorization_acl._LibraryTOCEntryACLProvider" />
	<adapter factory=".authorization_acl._FilesystemEntryACLProvider" />
	<adapter factory=".authorization_acl._LibraryEntryACLProvider" />
	<adapter factory=".authorization_acl._DataserverFolderACLProvider" />
	<adapter factory=".authorization_acl._ContentPackageLibraryACLProvider" />
	<adapter factory=".providers._ProviderACLProvider" />

	<!-- Temporary quiz adapters -->
	<adapter factory="str nti.assessment.solution.QLatexSymbolicMathSolution"
			 provides="nti.assessment.interfaces.IQLatexSymbolicMathSolution"
			 for="nti.dataserver.quizzes.QuizQuestionAnswer"/>

	<!--
		Let annotations be stored on some objects, primarily for the
		purpose of getting created and last modified information
		through dublincore.
	-->
	<class class="nti.assessment.assessed.QAssessedQuestion">
		<implements interface="zope.annotation.interfaces.IAttributeAnnotatable" />
	</class>

	<class class="nti.assessment.assessed.QAssessedQuestionSet">
		<implements interface="zope.annotation.interfaces.IAttributeAnnotatable" />
	</class>

	<!-- NTIID Resolvers -->
	<utility factory=".ntiids._OIDResolver" name="OID" />
	<utility factory=".ntiids._ClassResolver" name="Class" />
	<utility factory=".ntiids._ClassResolver" name="MeetingRoom:Class" />
	<utility factory=".ntiids._SectionResolver" name="ClassSection" />
	<utility factory=".ntiids._SectionResolver" name="MeetingRoom:ClassSection" />
	<utility factory=".ntiids._ContentResolver" name="HTML" />
	<utility factory=".ntiids._ContentResolver" name="Root" />
	<utility factory=".ntiids._AssessmentResolver" name="NAQ" />
	<utility factory=".ntiids._MeetingRoomResolver" name="MeetingRoom" />
	<utility factory=".ntiids._MeetingRoomResolver" name="MeetingRoom:Group" />
	<utility factory=".ntiids._TranscriptResolver" name="Transcript" />

	<utility factory=".ntiids._UGDResolver" name="Note" />
	<!-- Legacy quizzes are stored under specific users -->
	<utility factory=".ntiids._UGDResolver" name="Quiz" />

</configure>
